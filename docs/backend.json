{
  "entities": {
    "Villa": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Villa",
      "type": "object",
      "description": "Represents a villa within the Saima Villas community.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the villa (e.g., 'A-01').",
          "format": "string"
        },
        "category": {
          "type": "string",
          "description": "Category of the villa (e.g., '240', '160')."
        },
        "street": {
          "type": "string",
          "description": "Street name where the villa is located."
        },
        "block": {
          "type": "string",
          "description": "Block in which the villa is located (e.g., 'A', 'B')."
        },
        "ownerName": {
          "type": "string",
          "description": "Name of the villa owner."
        },
        "mapLink": {
          "type": "string",
          "description": "Link to the map location of the villa.",
          "format": "uri"
        }
      },
      "required": [
        "id",
        "category",
        "street",
        "block"
      ]
    },
    "Advertisement": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Advertisement",
      "type": "object",
      "description": "Represents a community advertisement.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the advertisement."
        },
        "title": {
          "type": "string",
          "description": "Title of the advertisement."
        },
        "description": {
          "type": "string",
          "description": "Description of the advertisement."
        },
        "phone": {
          "type": "string",
          "description": "Phone number of the advertiser."
        },
        "category": {
          "type": "string",
          "description": "Category of the advertisement (e.g., 'Property', 'Food')."
        },
        "expiry": {
          "type": "number",
          "description": "Timestamp representing the advertisement's expiration date."
        },
        "poolTime": {
          "type": "string",
          "description": "Time for car pooling (if applicable).",
          "format": "time"
        },
        "poolSeats": {
          "type": "number",
          "description": "Number of seats available for car pooling."
        },
        "poolArea": {
          "type": "string",
          "description": "Area for car pooling."
        },
        "poolCharges": {
          "type": "number",
          "description": "Charges per seat for car pooling."
        },
        "poolCar": {
          "type": "string",
          "description": "Car make and model for car pooling."
        }
      },
      "required": [
        "id",
        "title",
        "description",
        "phone",
        "category",
        "expiry"
      ]
    },
    "ManagementPost": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ManagementPost",
      "type": "object",
      "description": "Represents a post from the management.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the management post."
        },
        "type": {
          "type": "string",
          "description": "Type of the post (e.g., 'Announcement', 'Maintenance')."
        },
        "title": {
          "type": "string",
          "description": "Title of the post."
        },
        "content": {
          "type": "string",
          "description": "Content of the post."
        },
        "timestamp": {
          "type": "number",
          "description": "Timestamp of when the post was created."
        }
      },
      "required": [
        "id",
        "type",
        "title",
        "content"
      ]
    },
    "Complaint": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Complaint",
      "type": "object",
      "description": "Represents a complaint submitted by a resident.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the complaint."
        },
        "villa": {
          "type": "string",
          "description": "Villa number of the complainant."
        },
        "title": {
          "type": "string",
          "description": "Title of the complaint."
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the complaint."
        },
        "noted": {
          "type": "boolean",
          "description": "Indicates if the complaint has been noted by management."
        },
        "resolved": {
          "type": "boolean",
          "description": "Indicates if the complaint has been resolved."
        },
        "timestamp": {
          "type": "number",
          "description": "Timestamp of when the complaint was submitted."
        },
        "resolvedDate": {
          "type": "number",
          "description": "Timestamp of when the complaint was resolved."
        }
      },
      "required": [
        "id",
        "villa",
        "title",
        "description"
      ]
    },
    "EmergencyContact": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "EmergencyContact",
      "type": "object",
      "description": "Represents an emergency contact.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the emergency contact."
        },
        "type": {
          "type": "string",
          "description": "Type of contact (e.g., 'Plumber', 'Electrician')."
        },
        "name": {
          "type": "string",
          "description": "Name of the contact person/service."
        },
        "phone": {
          "type": "string",
          "description": "Phone number of the contact."
        },
        "description": {
          "type": "string",
          "description": "Additional notes or description for the contact."
        }
      },
      "required": [
        "id",
        "type",
        "name",
        "phone"
      ]
    },
    "ApprovedPhone": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ApprovedPhone",
      "type": "object",
      "description": "Represents a phone number approved for posting content.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the approved phone number."
        },
        "phone": {
          "type": "string",
          "description": "The approved phone number."
        }
      },
      "required": [
        "id",
        "phone"
      ]
    },
    "ManagementPassword": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ManagementPassword",
      "type": "object",
      "description": "Represents the management login password.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the password record."
        },
        "password": {
          "type": "string",
          "description": "The management login password."
        }
      },
      "required": [
        "id",
        "password"
      ]
    },
    "MartStatus": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "MartStatus",
      "type": "object",
      "description": "Represents the current status (open/closed) of the Saima Mart.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the mart status record."
        },
        "isOpen": {
          "type": "boolean",
          "description": "Boolean indicating whether the mart is currently open (true) or closed (false)."
        },
        "lastUpdated": {
          "type": "number",
          "description": "Timestamp of the last time the mart status was updated."
        }
      },
      "required": [
        "id",
        "isOpen"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/villas/{villaId}",
        "definition": {
          "entityName": "Villa",
          "schema": {
            "$ref": "#/backend/entities/Villa"
          },
          "description": "Stores villa data, uniquely identified by villaId.",
          "params": [
            {
              "name": "villaId",
              "description": "Unique identifier for the villa (e.g., 'A-01')."
            }
          ]
        }
      },
      {
        "path": "/advertisements/{advertisementId}",
        "definition": {
          "entityName": "Advertisement",
          "schema": {
            "$ref": "#/backend/entities/Advertisement"
          },
          "description": "Stores advertisement data, uniquely identified by advertisementId.",
          "params": [
            {
              "name": "advertisementId",
              "description": "Unique identifier for the advertisement."
            }
          ]
        }
      },
      {
        "path": "/managementPosts/{managementPostId}",
        "definition": {
          "entityName": "ManagementPost",
          "schema": {
            "$ref": "#/backend/entities/ManagementPost"
          },
          "description": "Stores management posts, uniquely identified by managementPostId.",
          "params": [
            {
              "name": "managementPostId",
              "description": "Unique identifier for the management post."
            }
          ]
        }
      },
      {
        "path": "/complaints/{complaintId}",
        "definition": {
          "entityName": "Complaint",
          "schema": {
            "$ref": "#/backend/entities/Complaint"
          },
          "description": "Stores complaints, uniquely identified by complaintId.",
          "params": [
            {
              "name": "complaintId",
              "description": "Unique identifier for the complaint."
            }
          ]
        }
      },
      {
        "path": "/emergencyContacts/{emergencyContactId}",
        "definition": {
          "entityName": "EmergencyContact",
          "schema": {
            "$ref": "#/backend/entities/EmergencyContact"
          },
          "description": "Stores emergency contacts, uniquely identified by emergencyContactId.",
          "params": [
            {
              "name": "emergencyContactId",
              "description": "Unique identifier for the emergency contact."
            }
          ]
        }
      },
      {
        "path": "/approvedPhones/{approvedPhoneId}",
        "definition": {
          "entityName": "ApprovedPhone",
          "schema": {
            "$ref": "#/backend/entities/ApprovedPhone"
          },
          "description": "Stores approved phone numbers, uniquely identified by approvedPhoneId.  Existence of a document is required for creating Ads, Complaints, and Contacts.",
          "params": [
            {
              "name": "approvedPhoneId",
              "description": "Unique identifier for the approved phone number."
            }
          ]
        }
      },
      {
        "path": "/managementPasswords/{managementPasswordId}",
        "definition": {
          "entityName": "ManagementPassword",
          "schema": {
            "$ref": "#/backend/entities/ManagementPassword"
          },
          "description": "Stores management login passwords, uniquely identified by managementPasswordId. Existence of a document is required for creating/editing ManagementPosts and resolving complaints.",
          "params": [
            {
              "name": "managementPasswordId",
              "description": "Unique identifier for the password record."
            }
          ]
        }
      },
      {
        "path": "/martStatus/{martStatusId}",
        "definition": {
          "entityName": "MartStatus",
          "schema": {
            "$ref": "#/backend/entities/MartStatus"
          },
          "description": "Stores the Saima Mart status (open/closed), uniquely identified by martStatusId.",
          "params": [
            {
              "name": "martStatusId",
              "description": "Unique identifier for the mart status record."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore data structure is designed to ensure authorization independence, clarity, and QAPs (Rules are not Filters), adhering to the core design principles. Key collections are segregated to maintain homogeneous security postures.\n\n1.  **Authorization Independence (Denormalization):**\n    *   For `Advertisement`, `Complaint`, and `EmergencyContact`, access control relies on whether the phone number is in the `/approvedPhones` collection or the management role. Thus, read access to these collections doesn't depend on reading other documents. Since global roles (admin, management) are enforced via existence checks on dedicated role collections, authorization is independent of the data content and avoids the need for `get()` calls. Ads, complaints, and contacts are globally readable to all authenticated users, enabling QAPs for listing operations.\n    *   Since ads require phone verification, which relies on the `/approved_phones` collection, and management posts need management login, based on `/managementPasswords`, authorization rules can be enforced without reading other documents.\n2.  **Structural Segregation (Homogeneous Security Posture):**\n    *   `villas` collection stores data on the villas in Saima Villas, enabling easy lookup and retrieval of information.\n    *   `/advertisements` collection stores all advertisement entities.\n    *   `/managementPosts` collection stores all the managementPosts entities.\n    *   `/complaints` collection stores all complaints entities.\n    *   `/emergencyContacts` collection stores all emergency contacts.\n    *   `/approvedPhones` collection stores approved phone numbers for posting advertisement, complaints, and emergency contacts.\n    *   `/managementPasswords` collection stores the management password for login.\n    *   `/martStatus` collection stores the Saima Mart status. This enables the mart owner to update the status and users to view that.\n\n3. **Access Modeling (Standardization and Consistency):**\n*   Private Data: For `approvedPhones` and `managementPasswords`, existence checks are used to enforce authorization. Absence of custom claims and relying on `request.auth.uid` further simplifies this model.\n*   Collaborative Data: the applications uses the whole database as public (ads, complaints, contacts). There is no use of membership map (`members: {uid1: \"role\", uid2: \"role\"}`).\n*   Global Roles (DBAC): `/approved_phones/{phoneId}` is the way to authorize someone to create an add, a complaint or a contact. `/managementPasswords/{passwordId}` is the way to authorize someone to write to managementPosts and close/resolve complaints.\n\n4.  **QAPs (Rules are not Filters):**\n    *   The structure allows secure `list` operations on `/advertisements`, `/managementPosts`, `/complaints`, `/emergencyContacts` because access to individual documents doesn't depend on the content of other documents.\n\n5. **Data Clarity and Predictability**\n*   Explicit State Modeling: Use a single, dedicated status field (`isOpen` in `martStatus` collection) rather than inferring state from multiple booleans or timestamps.\n*   Radical Consistency: Enforce strict, semantic naming conventions. Standardize authorization fields (e.g., always `ownerId`). Wildcards are descriptive (e.g., `{projectId}` not `{id}`)."
  }
}