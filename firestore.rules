/**
 * @file Firestore Security Rules for Saima Villas Community App
 * @version 2
 *
 * @Core Philosophy: This ruleset provides public read access to most data while restricting write access based on pre-approved roles or credentials.
 *
 * @Data Structure:
 * - /villas/{villaId}: Publicly readable villa information.
 * - /advertisements/{advertisementId}: Publicly readable advertisements; creation requires an approved phone number.
 * - /managementPosts/{managementPostId}: Publicly readable posts from management; creation requires a management password.
 * - /complaints/{complaintId}: Publicly readable complaints; creation requires an approved phone number, resolution requires a management password.
 * - /emergencyContacts/{emergencyContactId}: Publicly readable emergency contact information; creation requires an approved phone number.
 * - /approvedPhones/{approvedPhoneId}: List of approved phone numbers; write-restricted to prevent unauthorized ad creation.
 * - /managementPasswords/{managementPasswordId}: List of management passwords; write-restricted to prevent unauthorized management actions.
 * - /martStatus/{martStatusId}: Publicly readable mart status; write-restricted to prevent unauthorized status changes.
 * - /namazTimings/{timingId}: Publicly readable prayer timings.
 *
 * @Key Security Decisions:
 * - Public Read Access: Villas, advertisements, management posts, complaints, emergency contacts, mart status, and prayer timings are all publicly readable, even by unauthenticated users.
 * - Role-Based Writes: Advertisement, Complaint, and EmergencyContact creation are controlled by the presence of a phone number in the /approvedPhones collection. ManagementPost creation and Complaint resolution are controlled by the presence of a valid management password in the /managementPasswords collection.
 * - Denormalization for Authorization: The approvedPhones and managementPasswords collections act as denormalized role stores, enabling fast existence checks during write operations without the need for costly or impossible queries.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to villa data. No write access is granted.
     * @path /villas/{villaId}
     * @allow (get, list): Any user can read villa data.
     * @deny (create, update, delete): No user can create, update, or delete villa data.
     * @principle Public read access for villa data.
     */
    match /villas/{villaId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to advertisements. Creation requires an approved phone number.
     * @path /advertisements/{advertisementId}
     * @allow (get, list): Any user can read advertisement data.
     * @allow (create): An authenticated user with a phone number in the approvedPhones collection can create advertisements.
     * @deny (update, delete): No user can update or delete advertisements.
     * @deny (create): An unauthenticated user cannot create advertisements.
     * @principle Public read access with role-based writes for advertisements.
     */
    match /advertisements/{advertisementId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isApprovedPhone();
      allow update, delete: if false;
    }

    /**
     * @description Allows public read access to management posts. Creation requires a valid management password.
     * @path /managementPosts/{managementPostId}
     * @allow (get, list): Any user can read management posts.
     * @allow (create): An authenticated user with a valid management password can create management posts.
     * @deny (update, delete): No user can update or delete management posts.
     * @deny (create): An unauthenticated user cannot create management posts.
     * @principle Public read access with role-based writes for management posts.
     */
    match /managementPosts/{managementPostId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isValidManagementPassword();
      allow update, delete: if false;
    }

    /**
     * @description Allows public read access to complaints. Creation requires an approved phone number, resolution requires a management password.
     * @path /complaints/{complaintId}
     * @allow (get, list): Any user can read complaint data.
     * @allow (create): An authenticated user with a phone number in the approvedPhones collection can create complaints.
     * @allow (update): An authenticated user with a valid management password can resolve complaints.
     * @deny (delete): No user can delete complaints.
     * @deny (create): An unauthenticated user cannot create complaints.
     * @principle Public read access with role-based writes for complaints.
     */
    match /complaints/{complaintId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isApprovedPhone();
      allow update: if isSignedIn() && isValidManagementPassword() && resource != null;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to emergency contacts. Creation requires an approved phone number.
     * @path /emergencyContacts/{emergencyContactId}
     * @allow (get, list): Any user can read emergency contact data.
     * @allow (create): An authenticated user with a phone number in the approvedPhones collection can create emergency contacts.
     * @deny (update, delete): No user can update or delete emergency contacts.
     * @deny (create): An unauthenticated user cannot create emergency contacts.
     * @principle Public read access with role-based writes for emergency contacts.
     */
    match /emergencyContacts/{emergencyContactId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isApprovedPhone();
      allow update, delete: if false;
    }

    /**
     * @description Restricts write access to approved phone numbers.
     * @path /approvedPhones/{approvedPhoneId}
     * @allow (get, list): Any user can read approved phone numbers.
     * @deny (create, update, delete): No user can create, update, or delete approved phone numbers.
     * @principle Restricts write access to prevent unauthorized ad creation.
     */
    match /approvedPhones/{approvedPhoneId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Restricts write access to management passwords.
     * @path /managementPasswords/{managementPasswordId}
     * @allow (get, list): Any user can read management passwords.
     * @deny (create, update, delete): No user can create, update, or delete management passwords.
     * @principle Restricts write access to prevent unauthorized management actions.
     */
    match /managementPasswords/{managementPasswordId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to the mart status. Write access is restricted.
     * @path /martStatus/{martStatusId}
     * @allow (get, list): Any user can read the mart status.
     * @deny (create, update, delete): No user can create, update, or delete the mart status.
     * @principle Public read access with restricted writes for mart status.
     */
    match /martStatus/{martStatusId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to Namaz timings. Write access is restricted.
     * @path /namazTimings/{timingId}
     * @allow (get, list): Any user can read Namaz timings.
     * @deny (create, update, delete): No user can create, update, or delete Namaz timings.
     * @principle Public read access with restricted writes for Namaz timings.
     */
    match /namazTimings/{timingId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }
    
    /**
     * @description Allows public read access to Mart passwords. Write access is restricted.
     * @path /martPasswords/{passwordId}
     * @allow (get, list): Any user can read mart passwords.
     * @deny (create, update, delete): No user can create, update, or delete mart passwords.
     * @principle Public read access with restricted writes for mart passwords.
     */
    match /martPasswords/{passwordId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isApprovedPhone() {
      return exists(/databases/$(database)/documents/approvedPhones/$(request.auth.uid));
    }

    function isValidManagementPassword() {
      return exists(/databases/$(database)/documents/managementPasswords/$(request.auth.uid));
    }
  }
}
    